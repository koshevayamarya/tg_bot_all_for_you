from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.utils.chat_action import ChatActionSender
from aiogram.utils.media_group import MediaGroupBuilder
from aiogram.types import FSInputFile

import asyncio
import logging
import json


BOT_TOKEN = "7289756303:AAGSPRCfyoa7_Hk7WcD3QkooSDfaOENvHjg"
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)
MASKS_DATA = "masks.json"


try:
    with open(MASKS_DATA, 'r', encoding='utf-8') as f:
        masks_data = json.load(f)
    logging.info("–î–∞–Ω–Ω—ã–µ –æ –º–∞—Å–∫–∞—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

except FileNotFoundError:
    logging.error(f"–§–∞–π–ª {MASKS_DATA} –Ω–µ –Ω–∞–π–¥–µ–Ω.  –ë–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")
    masks_data = []
except json.JSONDecodeError:
    logging.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ —Ñ–∞–π–ª–µ {MASKS_DATA}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.")
    masks_data = []


class UserData(StatesGroup):
    skin_type = State()
    allergy = State()
    allergy_type = State()
    sensitivity = State()
    age_group = State()
    skin_problem = State()
    desired_effect = State()


bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
user_data = {}


def create_keyboard(items, row_width=2):
    builder = ReplyKeyboardBuilder()
    for item in items:
        builder.add(KeyboardButton(text=item))
    builder.adjust(row_width)
    return builder.as_markup(resize_keyboard=True)


def create_final_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîÑ –ù–æ–≤—ã–π –ø–æ–¥–±–æ—Ä")],
            [KeyboardButton(text="üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É")]
        ],
        resize_keyboard=True
    )


@dp.message(Command("start"))
async def start_handler(message: types.Message, state: FSMContext):
    await state.clear()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await message.answer(
        "üß¥ –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—É—é –º–∞—Å–∫—É –¥–ª—è –ª–∏—Ü–∞. "
        "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–≤–æ–µ–≥–æ —Ç–∏–ø–∞ –∫–æ–∂–∏.",
        reply_markup=create_keyboard(["–ñ–∏—Ä–Ω–∞—è", "–°—É—Ö–∞—è", "–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è", "–ù–æ—Ä–º–∞–ª—å–Ω–∞—è"])
    )
    await state.set_state(UserData.skin_type)


@dp.message(UserData.skin_type, F.text.in_(["–ñ–∏—Ä–Ω–∞—è", "–°—É—Ö–∞—è", "–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è", "–ù–æ—Ä–º–∞–ª—å–Ω–∞—è"]))
async def handle_skin_type(message: types.Message, state: FSMContext):
    user_data["user_skin_type"] = message.text
    await message.answer("‚ö†Ô∏è –ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –∞–ª–ª–µ—Ä–≥–∏–∏?", reply_markup=create_keyboard(["–î–∞", "–ù–µ—Ç"]))
    await state.set_state(UserData.allergy)


@dp.message(UserData.allergy, F.text == "–î–∞")
async def handle_allergy_yes(message: types.Message, state: FSMContext):
    await message.answer(
        "–í—ã–±–µ—Ä–∏ –∞–ª–ª–µ—Ä–≥–µ–Ω—ã:",
        reply_markup=create_keyboard(["–§—Ä—É–∫—Ç–æ–≤—ã–µ –∫–∏—Å–ª–æ—Ç—ã", "–ú—ë–¥", "–≠—Ñ–∏—Ä–Ω—ã–µ –º–∞—Å–ª–∞", "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"])
    )
    await state.set_state(UserData.allergy_type)


@dp.message(UserData.allergy, F.text == "–ù–µ—Ç")
async def handle_allergy_no(message: types.Message, state: FSMContext):
    user_data["allergy"] = False
    await message.answer("üëå –•–æ—Ä–æ—à–æ! –ê –∫–∞–∫ –Ω–∞—Å—á–µ—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–∂–∏?",
                         reply_markup=create_keyboard(["–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è", "–ù–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è"]))
    await state.set_state(UserData.sensitivity)


@dp.message(UserData.allergy_type, F.text.in_(["–§—Ä—É–∫—Ç–æ–≤—ã–µ –∫–∏—Å–ª–æ—Ç—ã", "–ú—ë–¥", "–≠—Ñ–∏—Ä–Ω—ã–µ –º–∞—Å–ª–∞"]))
async def handle_allergy_type(message: types.Message, state: FSMContext):
    if "allergies" not in user_data:
        user_data["allergies"] = []
    user_data["allergies"].append(message.text)
    await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ! –ï—Å—Ç—å –µ—â—ë –∞–ª–ª–µ—Ä–≥–µ–Ω—ã?", reply_markup=create_keyboard(
        ["–§—Ä—É–∫—Ç–æ–≤—ã–µ –∫–∏—Å–ª–æ—Ç—ã", "–ú—ë–¥", "–≠—Ñ–∏—Ä–Ω—ã–µ –º–∞—Å–ª–∞", "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"]))


@dp.message(UserData.allergy_type, F.text == "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å")
async def handle_allergy_next(message: types.Message, state: FSMContext):
    await message.answer("üëå –•–æ—Ä–æ—à–æ! –ê –∫–∞–∫ –Ω–∞—Å—á–µ—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–∂–∏?",
                         reply_markup=create_keyboard(["–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è", "–ù–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è"]))
    await state.set_state(UserData.sensitivity)


@dp.message(UserData.sensitivity, F.text.in_(["–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è", "–ù–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è"]))
async def handle_sensitivity(message: types.Message, state: FSMContext):
    user_data["sensitivity"] = message.text
    await message.answer("üëµ –í –∫–∞–∫–æ–π –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è?",
                         reply_markup=create_keyboard(["–î–æ 18", "18‚Äì25", "25‚Äì35", "35+"]))
    await state.set_state(UserData.age_group)


@dp.message(UserData.age_group, F.text.in_(["–î–æ 18", "18‚Äì25", "25‚Äì35", "35+"]))
async def handle_age_group(message: types.Message, state: FSMContext):
    user_data["age_group"] = message.text
    await message.answer(
        "üë©‚Äçüî¨ –ö–∞–∫–∞—è —É —Ç–µ–±—è –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –∫–æ–∂–∏?",
        reply_markup=create_keyboard(["–ê–∫–Ω–µ", "–ü–∏–≥–º–µ–Ω—Ç–∞—Ü–∏—è", "–®–µ–ª—É—à–µ–Ω–∏–µ", "–í–æ—Å–ø–∞–ª–µ–Ω–∏—è", "–ü–æ—Å—Ç–∞–∫–Ω–µ", "–ú–æ—Ä—â–∏–Ω—ã"])
    )
    await state.set_state(UserData.skin_problem)


@dp.message(UserData.skin_problem,
            F.text.in_(["–ê–∫–Ω–µ", "–ü–∏–≥–º–µ–Ω—Ç–∞—Ü–∏—è", "–®–µ–ª—É—à–µ–Ω–∏–µ", "–í–æ—Å–ø–∞–ª–µ–Ω–∏—è", "–ü–æ—Å—Ç–∞–∫–Ω–µ", "–ú–æ—Ä—â–∏–Ω—ã"]))
async def handle_skin_problem(message: types.Message, state: FSMContext):
    user_data["skin_problem"] = message.text
    await message.answer(
        "‚ú® –ö–∞–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç –º–∞—Å–∫–∏?",
        reply_markup=create_keyboard(
            ["–£–≤–ª–∞–∂–Ω–µ–Ω–∏–µ", "–û—Ç—à–µ–ª—É—à–∏–≤–∞–Ω–∏–µ", "–ú–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ü–æ–¥—Å—É—à–∏–≤–∞–Ω–∏–µ", "–û—Å–≤–µ—Ç–ª–µ–Ω–∏–µ", "–õ–∏—Ñ—Ç–∏–Ω–≥"])
    )
    await state.set_state(UserData.desired_effect)


@dp.message(UserData.desired_effect,
            F.text.in_(["–£–≤–ª–∞–∂–Ω–µ–Ω–∏–µ", "–û—Ç—à–µ–ª—É—à–∏–≤–∞–Ω–∏–µ", "–ú–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ü–æ–¥—Å—É—à–∏–≤–∞–Ω–∏–µ", "–û—Å–≤–µ—Ç–ª–µ–Ω–∏–µ", "–õ–∏—Ñ—Ç–∏–Ω–≥"]))
async def handle_desired_effect(message: types.Message, state: FSMContext):
    user_data["desired_effect"] = message.text
    await message.answer("üîç –ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–∞—Å–∫–∏...")
    recommendations = []
    for mask in masks_data:
        user_allergies = user_data.get('allergies', [])
        is_suitable = True
        if user_allergies:
            for allergy in user_allergies:
                if allergy.lower() in mask["ingredients"]:
                    is_suitable = False
        if (user_data["user_skin_type"] in mask["skin_type"] and
                user_data["desired_effect"] in mask["effect"] and user_data["skin_problem"] in mask["skin_problem"]
                and is_suitable):
            recommendations.append(mask)

    if recommendations:
        response = "üéâ –í–æ—Ç —Ç–≤–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n\n"
        await message.answer(
            response,
            parse_mode="Markdown"
        )
        for mask in recommendations:
            response_ = (
                f"üß¥ {mask['name']}\n"
                f"üìù {mask['description']}\n"
                f"üîó –°—Å—ã–ª–∫–∏: {', '.join([f'[{market}]({link})' for market, link in mask['market_links'].items()])}\n   "
            )
            try:  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ
                async with ChatActionSender.upload_photo(bot=message.bot, chat_id=message.chat.id):
                    media = MediaGroupBuilder(caption="")
                    media.add_photo(FSInputFile(mask["image_url"]), mask["name"])
                    await asyncio.sleep(1)
                    await message.reply_media_group(media=media.build())
                await message.answer(
                    response_,
                    parse_mode="Markdown"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–∞—Å–∫–∏ {mask['name']}: {e}")
                await message.answer(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–∞—Å–∫–∏ {mask['name']}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await message.answer("–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", reply_markup=create_final_menu())
    else:
        await message.answer("üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–∞—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=create_final_menu())


@dp.message(F.text == "üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É")
async def handle_finish(message: types.Message):
    await message.answer(
        "‚úÖ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞!",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")]],
            resize_keyboard=True
        )
    )


@dp.message(F.text == "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
async def handle_restart(message: types.Message, state: FSMContext):
    await start_handler(message, state)


@dp.message(F.text == "üîÑ –ù–æ–≤—ã–π –ø–æ–¥–±–æ—Ä")
async def handle_restart(message: types.Message, state: FSMContext):
    await start_handler(message, state)


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
